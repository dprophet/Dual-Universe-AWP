{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"------------------------------------------------------------------------------\n------ Ship Info by Krengus --------------------------------------------------\n------ support and feedback: https://discord.gg/BfnbtFyHrt\n------------------------------------------------------------------------------\nversion = 0.62\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- USER VARIABLES --\n\nHub1_Max_Volume = 1920000 --export\nHub2_Max_Volume = 487500 --export\nHub3_Max_Volume = 0 --export\nHub4_Max_Volume = 0 --export\n\nContainer_Optimization = 5 --export\nFuel_Tank_Optimization = 5 --export\nSpace_Fuel_Tank_Handling = 5 --export\nAtmo_Fuel_Tank_Handling = 5 --export\nRocket_Fuel_Tank_Handling = 5 --export\n\nRefresh_Rate = 1 --export\nShow_Unit = true --export\nDebug = false --export\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- Layout: {X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5,X6,Y6} \n-- 1 = INFO\n-- 2 = DAMAGED ELEMENTS\n-- 3 = FUEL TANKS\n-- 4 = CARGO HUBS\n-- 5 = DOCKED CONSTRUCTS\n-- 6 = BOARDED PLAYERS\n\nCustom_Layout = {0.22,0.16,0.5,0.646,1,1,0.53,0.16,0.22,0.4,0.53,0.4}\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- SCRIPT VARIABLES --\n\nFirstRun = true\nOldContent = {}\nscreens =  {}\nMaxHandlingHP = 1.2 -- multiplier for maxed HP handling talents\n\nlocal AtmoTankXS = 49 -- base hitpoints, used to find out tank size and weight   \nlocal AtmoTankS = 162\nlocal AtmoTankM = 1314\nlocal AtmoTankL = 10460\nlocal SpaceTankXS = 49\nlocal SpaceTankS = 186\nlocal SpaceTankM = 1495\nlocal SpaceTankL = 15932\nlocal RocketTankXS = 365\nlocal RocketTankS = 735\nlocal RocketTankM = 6230\nlocal RocketTankL = 68823\n\nlocal HubMaxVol = {Hub1_Max_Volume,Hub2_Max_Volume,Hub3_Max_Volume,Hub4_Max_Volume}\nlocal hubs = {}\nlocal Hubs = {}\nlocal tanks = {}\nlocal json = require(\"dkjson\")\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- SCRIPT START --\n\nunit.setTimer(\"upd\",Refresh_Rate)\nif Show_Unit == false then unit.hide() end\n\nfor slot,element in pairs(unit)do -- checking elements in slots\n    if type(element)==\"table\"and type(element.export)==\"table\"then\n        if element.getElementClass then\n            if element.getElementClass()==\"ScreenUnit\"then \n                screens[#screens+1]=element\n                screens[#screens].slot=slot\n                screens[#screens].id=element.getId()\n            elseif element.getElementClass()==\"CoreUnitDynamic\"then \n                core=element\n            elseif element.getElementClass()==\"ItemContainer\"then\n                hubs[#hubs+1]=element\n                hubs[#hubs].slot=slot\n            elseif element.getElementClass()==\"DataBankUnit\"then \n                databank=element\n                if databank.hasKey(\"theme\") == 0 then\n                    if Debug == true then system.print(\"Databank theme key not found\") end\n                    databank.setStringValue(\"theme\",json.encode({1,8,9,1,10,0.5,1,1}))\n                end\n            else\n                --system.print(element.getElementClass())\n            end \n        end \n    end \nend\n\n-- error messages if elements not linked\n\nif not next(screens) then\n    system.print(\"No screen found\")\n    unit.exit()\nend\ntable.sort(screens, function(a,b) return a.slot < b.slot end) -- sorting screens table by slot\n\nif core == nil then\n    system.print(\"No core found\")\n    unit.exit()\nend\n\nif databank == nil then\n    system.print(\"No databank found\")\n    unit.exit()\nend\n\nif not next(hubs) then\n    system.print(\"No hub found\")\n    unit.exit()\nend\ntable.sort(hubs, function(a,b) return a.slot < b.slot end) -- sorting hubs table by slot\n\nfor i=1, #hubs do -- Building Hubs Table\n    Hubs[i] = {\n        l = core.getElementNameById(hubs[i].getId()),\n        m = HubMaxVol[i],\n        v = math.floor(hubs[i].getItemsVolume()),\n        w = math.floor(hubs[i].getItemsMass()/1000)\n    }\nend\n\nlocal elements = core.getElementIdList() -- Building Tanks Table\n\nfor i = 1, #elements do\n\n    local ElementType = core.getElementTypeById(elements[i]) \n\n    if string.match(ElementType, \"Fuel Tank\") then\n        local ElementName = core.getElementNameById(elements[i])\n        local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n\n        if string.match(ElementType, \"Atmospheric Fuel Tank\") then\n            if MaxHitPoints > AtmoTankXS and MaxHitPoints < AtmoTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > AtmoTankS and MaxHitPoints < AtmoTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > AtmoTankM and MaxHitPoints < AtmoTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > AtmoTankL and MaxHitPoints < AtmoTankL*MaxHandlingHP then\n                TankWeight = 5481.27            \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = \"Atmo Tank [\"..elements[i]..\"]\",\n                    m = TankMaxVolume*(1+Atmo_Fuel_Tank_Handling*0.2)\n                })\n\n        elseif string.match(ElementType, \"Space Fuel Tank\") then\n            if MaxHitPoints > SpaceTankXS and MaxHitPoints < SpaceTankXS*MaxHandlingHP then\n                TankWeight = 35.03\n                TankMaxVolume = 100\n            elseif MaxHitPoints > SpaceTankS and MaxHitPoints < SpaceTankS*MaxHandlingHP then\n                TankWeight = 182.67\n                TankMaxVolume = 400\n            elseif MaxHitPoints > SpaceTankM and MaxHitPoints < SpaceTankM*MaxHandlingHP then\n                TankWeight = 988.67\n                TankMaxVolume = 1600\n            elseif MaxHitPoints > SpaceTankL and MaxHitPoints < SpaceTankL*MaxHandlingHP then\n                TankWeight = 5481.27  \n                TankMaxVolume = 12800\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = \"Space Tank [\"..elements[i]..\"]\",\n                    m = TankMaxVolume*(1+Space_Fuel_Tank_Handling*0.2)\n                })\n\n        elseif string.match(ElementType, \"Rocket Fuel Tank\") then\n            if MaxHitPoints > RocketTankXS and MaxHitPoints < RocketTankXS*MaxHandlingHP then\n                TankWeight = 173.42\n                TankMaxVolume = 400\n            elseif MaxHitPoints > RocketTankS and MaxHitPoints < RocketTankS*MaxHandlingHP then\n                TankWeight = 886.72\n                TankMaxVolume = 800\n            elseif MaxHitPoints > RocketTankM and MaxHitPoints < RocketTankM*MaxHandlingHP then\n                TankWeight = 4724.43\n                TankMaxVolume = 6400\n            elseif MaxHitPoints > RocketTankL and MaxHitPoints < RocketTankL*MaxHandlingHP then\n                TankWeight = 25741.76   \n                TankMaxVolume = 50000\n            else\n                system.print(\"MISSING --> type: \".. ElementType..\" name: \"..ElementName..\" hp: \"..MaxHitPoints)\n            end\n            table.insert(tanks, {\n                    id = elements[i],\n                    u = TankWeight,\n                    t = ElementType,\n                    l = \"Rocket Tank [\"..elements[i]..\"]\",\n                    m = TankMaxVolume*(1+Rocket_Fuel_Tank_Handling*0.2)\n                })\n        end\n    end\nend\n\ntable.sort(tanks, function(a,b) return a.t < b.t end) -- sorting tanks table by type\n\n------------------------------------------------------------------------------\n------------------------------------------------------------------------------\n-- UPDATE DATA FUNCTION --\n\nfunction UpdateData()\n    \n    local RepairMode = false\n\n    if FirstRun == true then RepairMode = true end\n\n    local idforarrow = nil\n    local vars = nil\n    local aid = nil\n\n    for key, screen in pairs(screens) do -- checking screens output for action triggers\n\n        if Debug == true then \n            start = system.getTime()\n        end\n\n        if databank.hasKey(screen.id) == 0 then\n            if Debug == true then system.print(\"Databank index key not found, setting default value\") end\n            databank.setStringValue(screen.id,1)\n        end\n\n        local o = json.decode(screen.getScriptOutput())\n\n        if  type(o) == 'table' then\n            if o.ThemeSelection[1] ~= nil then\n                if comparetables(json.decode(databank.getStringValue(\"theme\")), o.ThemeSelection) == false then\n                    databank.setStringValue(\"theme\", json.encode(o.ThemeSelection))\n                end\n            end\n\n            if o.Index ~= nil then o = o.Index end\n\n        elseif type(o) == 'string' then\n            if string.find(o, \",\") then -- if comma found in output\n                for screenindex, value in (o):gmatch \"(%w+)%s*,%s*(%w+)\" do\n                    o = screenindex\n                    aid = value\n                    if tonumber(o) == 52 then\n                        core.forceUndock(aid)\n                        if Debug == true then system.print(\"undocking \"..aid) end\n                    elseif tonumber(o) == 62 then\n                        core.forceDeboard(aid)\n                        if Debug == true then system.print(\"unboarding \"..aid) end\n                    end\n                end\n            end\n        end\n\n        if o ~= '' and o ~= nil then  -- if output not empty\n            if tonumber(o) ~= tonumber(databank.getStringValue(screen.id)) then -- checking if value already exists in DB\n                databank.setStringValue(screen.id, o)\n                if Debug == true then system.print(\"writing to databank screenId: \"..screen.id..\" index: \"..o) end\n            end\n        end     \n\n        if tonumber(o) == 2 then \n            if Debug == true then system.print(\"entering repair mode\") end\n            RepairMode = true\n            idforarrow = aid       \n        end\n\n        ------------------------------------------------------------------------------\n        -- setting up variables for screens\n\n       \n        local m = json.decode(databank.getStringValue(\"theme\"))\n\n        vars = [[\n        local version = ]]..version..[[        \n        local debug = ]]..tostring(Debug)..[[\n        local SavedTheme = {]]..m[1]..[[,]]..m[2]..[[,]]..m[3]..[[,]]..m[4]..[[,]]..m[5]..[[,]]..m[6]..[[,]]..m[7]..[[,]]..m[8]..[[}\n        local Custom_Layout = {]]..Custom_Layout[1]..[[,]]..Custom_Layout[2]..[[,]]..Custom_Layout[3]..[[,]]..Custom_Layout[4]..[[,]]..Custom_Layout[5]..[[,]]..Custom_Layout[6]..[[,]]..Custom_Layout[7]..[[,]]..Custom_Layout[8]..[[,]]..Custom_Layout[9]..[[,]]..Custom_Layout[10]..[[,]]..Custom_Layout[11]..[[,]]..Custom_Layout[12]..[[}\n        ]]..GetHubData(Hubs,hubs)..[[\n        ]]..GetTankData(tanks)..[[\n        ]]..GetDamagedData(RepairMode,idforarrow)..[[\n        ]]..GetDockedData()..[[\n        ]]..GetBoardedData()..[[\n        local ShipName = \"]]..core.getConstructName()..[[\" \n        local ShipMass = ]]..math.floor(core.getConstructMass())..[[ \n        ]]\n\n        if Debug == true then\n            duration = (system.getTime() - start)*1000\n            duration = math.floor((duration) * 100) / 100\n            -- system.print(duration)\n            debug = \"local Duration = \"..duration\n        else\n            debug = \"\"\n        end\n\n        if vars ~= OldContent[screen.id] then\n            screen.setRenderScript(debug.. \" local SavedIndex=\"..databank.getStringValue(screen.id)..\" local ScreenId=\"..screen.id..'\\n'..vars ..'\\n'.. screenContent)\n            if Debug == true then system.print(\"updating screen \"..screen.id) end\n            OldContent[screen.id] = vars\n        end\n        FirstRun = false\n\n    end\nend\n-- END UPDATE DATA FUNCTION --\n------------------------------------------------------------------------------\n\nUpdateData()\n\n\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"0"},{"code":"if vec3(unit.getMasterPlayerPosition()):len()>25 then\n    unit.exit()\nelse\n    UpdateData()\nend","filter":{"args":[{"value":"upd"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"1"},{"code":"screenContent = [[\n\n\nlocal json = require(\"dkjson\")\n--data = json.decode(getInput())\n--data = getInput()\nScreenIndex = ScreenIndex or SavedIndex\n--ScreenIndex = ScreenIndex or tonumber(data) or SavedIndex\n--setOutput(ScreenIndex)\nID = ID or 0\n\n--if type(ScreenIndex) == \"string\" then\nif string.find(ScreenIndex, \",\") then\n    for a, b in (ScreenIndex):gmatch \"(%w+)%s*,%s*(%w+)\" do\n        -- logMessage(\"comma found, setting screenIndex as \"..tonumber(a))\n        ScreenIndex = tonumber(a)\n        ID = b\n    end\nelse\n    -- ID = 0\nend\n\n\nlocal Themes = {}\nThemes[1] = {1,8,9,1,10,0.5,1,1}\nThemes[2] = {7,8,9,2,10,0.8,2,2}\nThemes[3] = {12,1,9,3,10,0.5,3,1}\nThemes[4] = {9,1,9,4,10,0.5,4,1}\nThemes[5] = {4,5,9,5,10,0.5,5,1}\nThemes[6] = {3,1,9,6,10,0.5,6,1}\n\n\nlocal Layouts = {}\n--Layouts[2] = {X1,Y1,X2,Y2,X3,Y3,X4,Y4,X5,Y5,X6,Y6}   \nLayouts[1] = {0.22,0.096,0.5,0.38,1,1,0.53,0.096,0.22,0.71,0.53,0.71}   \n--Layouts[2] = {0.22,0.16,0.5,0.646,1,1,0.53,0.16,0.22,0.4,0.53,0.4}   \nLayouts[2] = Custom_Layout\n\n\nlocal Colors = {}\nColors[1] = {r=0.06,g=0.76,b=1}\nColors[2] = {r=5/255,g=29/255,b=190/255}\nColors[3] = {r=149/255,g=12/255,b=143/255}\nColors[4] = {r=132/255,g=0,b=0}\nColors[5] = {r=226/255,g=25/255,b=25/255}\nColors[6] = {r=1,g=128/255,b=0}\nColors[7] = {r=1,g=200/255,b=27/255}\nColors[8] = {r=1,g=204/255,b=153/255}\nColors[9] = {r=1,g=1,b=1}\nColors[10] = {r=0.137,g=0.122,b=0.125}\nColors[11] = {r=0,g=0,b=0}\nColors[12] = {r=50/255,g=116/255,b=52/255}\n\n\nlocal BackgroundImages = {}\nBackgroundImages[1] = \"assets.prod.novaquark.com/61625/916a89d6-4103-4b28-9a48-04575d9a2b2b.png\"\nBackgroundImages[2] = \"assets.prod.novaquark.com/61625/bcacc064-8bd6-42d5-a9fd-8c91be03f114.jpg\"\nBackgroundImages[3] = \"assets.prod.novaquark.com/61625/d3fb78ed-90bd-4b2e-945a-7bbed92932e2.png\"\nBackgroundImages[4] = \"assets.prod.novaquark.com/61625/cc4a68e2-39c5-463e-9593-c174a4d41175.jpg\"\nBackgroundImages[5] = \"assets.prod.novaquark.com/61625/ae249dff-af47-410a-b9f7-9d8db6f5aaed.jpg\"\nBackgroundImages[6] = \"assets.prod.novaquark.com/61625/f6b19848-ceb8-4c8f-8b97-03c684c29c47.jpg\"\nBackgroundImages[7] = \"\" -- no background\n\nColor1 = Color1 or SavedTheme[1]\nColor2 = Color2 or SavedTheme[2]\nFontColor = FontColor or SavedTheme[3]\nSBackground = SBackground or SavedTheme[4]\nSelBackground = SelBackground or SavedTheme[5]\nSelOpacity = SelOpacity or SavedTheme[6]\nTheme = Theme or SavedTheme[7]\nLayout = Layout or SavedTheme[8]\n\ncolor1 = Colors[Color1]\ncolor2 = Colors[Color2]\nfontColor = Colors[FontColor]\n_background = BackgroundImages[SBackground]\nSelectionBackground =  Colors[SelBackground]\nSelectionOpacity = SelOpacity\n\n\nfunction SetTheme(t)\n    Color1 = t[1]\n    Color2 = t[2]\n    FontColor = t[3]\n    SBackground = t[4]\n    SelBackground =  t[5]\n    SelOpacity = t[6]\n    Theme = t[7]\n    Layout = t[8]\nend\n\n\nlocal D=createLayer()\nlocal E=createLayer()\nlocal F=createLayer()\nlocal G=createLayer()\nlocal H=createLayer()\n\nlocal rx,ry=getResolution() \nlocal cx,cy=getCursor()\n\nlocal BiggestFont = loadFont(\"Play-Bold\", 30)\nlocal BiggerFont = loadFont(\"Play-Bold\", 24) \nlocal NormalFont = loadFont(\"RobotoCondensed\", 20) \nlocal SmallerFont = loadFont(\"Play-Bold\", 18) \nlocal SmallestFont = loadFont(\"RobotoCondensed\", 15)\n\n-------------------------------------------------------------\n-- FUNCTIONS --\n\nfunction DrawFrame(X,Y,Width,Height)\n    --  ___                 ___\n    -- /   \\_______________/   \\\n    -- |                       |\n    -- |                       |\n    -- |                       |\n    -- |    _______________    |\n    -- \\___/               \\___/  this is not a bone!\n    --\n    X = X - Width/2 -- centering\n    xo = 20 -- offset x for curve\n    yo = 20 -- offset y for curve\n    addLine(D, X, Y, X+Width,Y)-- top line\n    addLine(D, X, Y+Height, X+Width,Y+Height)-- bottom line\n    addLine(D,X,Y , X-xo, Y-yo)-- top left curve\n    addLine(D,X-xo, Y-yo , X-Width/4-xo, Y-yo)-- top left line\n    addLine(D,X-Width/4-xo, Y-yo , X-Width/4-xo-xo, Y)-- top left corner curve\n    addLine(D,X-Width/4-xo-xo, Y, X-Width/4-xo-xo, Y+Height)-- left line\n    addLine(D,X+Width+xo+Width/4+xo, Y, X+Width+xo+Width/4+xo, Y+Height)-- right line\n    addLine(D,X+Width,Y, X+Width+xo, Y-yo)-- top right curve\n    addLine(D,X+Width+xo, Y-yo , X+Width+xo+Width/4, Y-yo)-- top right line\n    addLine(D,X+Width+xo+Width/4, Y-yo , X+Width+xo+Width/4+xo, Y)-- top right corner curve\n    addLine(D,X+Width+xo+Width/4+xo, Y+Height , X+Width+xo+Width/4+xo-xo, Y+Height+yo)-- bottom right curve\n    addLine(D,X+Width+xo+Width/4+xo-xo, Y+Height+yo , X+Width+xo+xo-xo, Y+Height+yo)-- bottom right line\n    addLine(D,X+Width+xo+xo-xo, Y+Height+yo , X+Width+xo+xo-xo-xo, Y+Height+yo-yo)-- top right corner curve\n    addLine(D,X-Width/4-xo-xo, Y+Height , X-Width/4-xo-xo+xo, Y+Height+yo)-- bottom left curve\n    addLine(D,X-Width/4-xo-xo+xo, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4, Y+Height+yo)-- bottom left line\n    addLine(D,X-Width/4-xo-xo+xo+Width/4, Y+Height+yo , X-Width/4-xo-xo+xo+Width/4+xo, Y+Height+yo-yo)-- bottom left corner curve\nend\n\n\n\nfunction reformatInt(i)\n    return tostring(i):reverse():gsub(\"%d%d%d\", \"%1 \"):reverse():gsub(\"^,\", \"\")\nend\n\nfunction MakeButtonClickable(X,Y,Width,Height,TargetIndex) -- func to replace with click\n\n    if cx > X and cx < X+Width and cy > Y-5 and cy < Y+Height+10 then \n\n        setNextFillColor(D,SelectionBackground.r,SelectionBackground.g,SelectionBackground.b,SelectionOpacity) -- box background\n        addBox(D,X-30,Y-15,Width+30,Height+40)\n        setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n        local l=20\n        setDefaultStrokeWidth(D, Shape_Line, 1)\n        addLine(D,X-30,Y-15,X-30+l,Y-15)\n        addLine(D,X-30,Y-15,X-30,Y-15+l)\n        addLine(D,X+Width,Y-15,X+Width-l,Y-15)\n        addLine(D,X+Width,Y-15,X+Width,Y-15+l)\n        addLine(D,X+Width,Y+Height+25,X+Width-l,Y+Height+25)\n        addLine(D,X+Width,Y+Height+25,X+Width,Y+Height+25-l)\n        addLine(D,X-30,Y+Height+25,X-30+l,Y+Height+25)\n        addLine(D,X-30,Y+Height+25-l,X-30,Y+Height+25)\n        setDefaultStrokeWidth(D, Shape_Line, 3)\n        setDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\n\n        if getCursorReleased() then           \n            ScreenIndex = TargetIndex\n            setOutput(json.encode(ScreenIndex))                    \n        end\n    end \n\nend\n\nfunction DrawSmallBox(Index,X,Y,Title,TableList,Count,ShowWeight,Weight,TargetIndex)\n    local Width = rx*0.28\n    local Height = 110\n\n    if Count == false then\n        Count = \"\"\n    else\n        Count = \" (\" .. Count .. \")\"\n    end\n\n    AddText(AlignH_Right,fontColor,SmallerFont,Title..Count,X+Width*0.88,Y+10)\n    \n    addLine(D, X+5, Y+28, X+Width*0.91, Y+28)\n    addLine(D, X+Width*0.91, Y+28,X+Width*0.91, Y+2 )\n    addLine(D, X+5, Y+28, X+5, Y+Height*0.91)    \n    local YY = Y+52\n    totalweight = 0\n\n    if ShowWeight == 1 then\n        AddText(AlignH_Left,fontColor,SmallerFont,Weight .. \"T\",X-5,Y+Height+10)  \n    end\n\n    if type(TableList) == \"table\" then\n        if #TableList > 3 then  \n            max = 3\n        else\n            max = #TableList\n        end\n        for i = 1,max do \n            if tonumber(TableList[i].l) ~= nil then\n                la = Labels[TableList[i].l]\n            else\n                la = TableList[i].l\n            end\n            setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n            addText(D, NormalFont, la .. \": \" .. math.floor(TableList[i].w) .. \" tons\" , X+16, YY)\n            YY = YY+25\n        end\n    end\n    if TargetIndex > 0 then\n        MakeButtonClickable(X,Y,Width,Height,TargetIndex)\n    end\n\nend\n\nfunction Click(X,Y,Width,Height)\n    if cx > X-Width*0.5 and cx < X+Width*0.5 and cy > Y-Height*0.5 and cy < Y+Height*0.5 then  \n        DrawSelection(X,Y,Width,Height)\n        if getCursorReleased() then\n            return true\n        end\n    end\nend\n\nfunction DrawCircleButton(X,Y,Size,Rotation)\n    setNextRotationDegrees(D, Rotation)\n    setNextFillColor(D, color2.r, color2.g, color2.b, 1) \n    if Rotation == 90 then\n        addTriangle(D, X+52, Y+55, X+52-Size, Y+55+Size*2, X+52+Size, Y+55+Size*2)\n    else\n        addTriangle(D, X+46, Y+55, X+46-Size, Y+55+Size*2, X+46+Size, Y+55+Size*2)\n    end\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addCircle(D, X+50, Y+70, Size*2+4)\n    setNextFillColor(D, 0, 0, 0, 1)\n    addCircle(D, X+50, Y+70, Size*2)\nend\n\nfunction DrawBackButton(X,Y,Width,Height,TargetIndex) \n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D,BiggestFont, \"Back\", X+Width*0.7,Y+Height*1.9)\n    DrawCircleButton(X,Y,15,-90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawNextButton(X,Y,Width,Height,TargetIndex)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D,BiggestFont, \"Next\", X+18,Y+Height*1.9)\n    DrawCircleButton(X+Width*0.59,Y,15,90)\n    MakeButtonClickable(X+40,Y+44,Width,Height,TargetIndex)\nend\n\nfunction DrawProgressBar(X,Y,Width,Height,Max,Current,text1,text2,Font)    \n    setNextStrokeWidth(D, 1) \n    setNextStrokeColor(D,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, 0,0,0, 1)\n    addBoxRounded(D,X-Width/2,Y,Width,Height,5)\n    AddText(AlignH_Right,fontColor,Font, text1, X-Width/2-20,Y+Height/2)\n    AddText(AlignH_Left,fontColor, Font,text2, X+Width/2+20,Y+Height/2)\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(D,X-Width/2+5,Y+5,Current*Width/Max-10,Height-10,5)\nend\n\nfunction DrawVProgressBar(X,Y,Width,Height,Max,Current,text1,text2)    \n    setNextStrokeWidth(D, 1) \n    setNextStrokeColor(D,color2.r, color2.g, color2.b, 1)\n    setNextFillColor(D, 0,0,0, 1)\n    addBoxRounded(D,X-Width/2,Y,Width,Height,5)\n    AddText(AlignH_Center,fontColor,SmallestFont, text1, X,Y+Height+15)\n    AddText(AlignH_Center,fontColor,SmallestFont,text2, X,Y+Height+35)\n    setNextFillColor(D, color1.r, color1.g, color1.b, 1)\n    addBoxRounded(D,X-Width/2+5,Y+Height-Current*Height/Max,Width-10,Height-(Height-Current*Height/Max),5)\nend\n\nfunction drawRadialGauge(X,Y,Size,Current,Max,Text,TankType)\n    local a1=math.floor(100/Max*Current)..\"%\" -- percent\n    local d=math.pi/180\n    local W=math.ceil(Current/Max*100)\n    local ab=100\n    local ac,ad=Size*math.cos(0),Size*math.sin(0)\n    local ae,af=Size*math.cos(360/ab*1*d),Size*math.sin(360/ab*1*d)\n    for ag=1,ab,1 do\n        local ac,ad=X+Size*math.cos((360/ab*(ag-1)+-90)*d),Y+Size*math.sin((360/ab*(ag-1)+-90)*d)\n        local ae,af=X+Size*math.cos((360/ab*ag+-90)*d),Y+Size*math.sin((360/ab*ag+-90)*d)\n        if ag<W or ag==W then\n            setNextFillColor(E,color1.r,color1.g,color1.b,1)\n        else \n            setNextFillColor(E,0,0,0,1)\n        end\n        addTriangle(E,X,Y,ac,ad,ae,af)\n    end\n    setNextFillColor(F,0.137,0.122,0.125,1)\n    addCircle(F,X,Y,Size/1.255)\n\n    if type(TankType) == 'string' then\n\n        if string.match(TankType, \"Atmospheric\") then\n            setNextFillColor(H,71/255,144/255,179/255,1) \n        elseif string.match(TankType, \"Space\") then\n            setNextFillColor(H,1,0.1,0.1,1)\n\n        elseif string.match(TankType, \"Rocket\") then\n            setNextFillColor(H,0.1,1,0.1,1)\n\n        end\n        addBox(H,X-Size/4,Y+ry*0.02,Size/2,4) \n    end\n\n    setNextFillColor(H, fontColor.r, fontColor.g, fontColor.b, 1)   \n    setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n    addText(H,BiggerFont,a1,X+(Size/15),Y+ry*0.01) -- centered percent\n    setNextTextAlign(H,AlignH_Center,AlignV_Bottom)\n    setNextFillColor(H, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(H,SmallestFont,Text,X,Y+Size*1.6)\nend\n\nfunction DrawSelection(X,Y,Width,Height)\n    setNextFillColor(D,SelectionBackground.r,SelectionBackground.g,SelectionBackground.b,SelectionOpacity) -- box background\n    addBox(D,X-Width*0.5,Y-Height*0.5,Width,Height)\n    setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n    local l=10\n    addLine(D,X-Width*0.5,Y-Height*0.5,X-Width*0.5+l,Y-Height*0.5)\n    addLine(D,X-Width*0.5,Y-Height*0.5,X-Width*0.5,Y-Height*0.5+l)\n    addLine(D,X+Width*0.5,Y-Height*0.5,X+Width*0.5-l,Y-Height*0.5)\n    addLine(D,X+Width*0.5,Y-Height*0.5,X+Width*0.5,Y-Height*0.5+l)\n    addLine(D,X+Width*0.5,Y+Height*0.5,X+Width*0.5-l,Y+Height*0.5)\n    addLine(D,X+Width*0.5,Y+Height*0.5,X+Width*0.5,Y+Height*0.5-l)\n    addLine(D,X-Width*0.5,Y+Height*0.5,X-Width*0.5+l,Y+Height*0.5)\n    addLine(D,X-Width*0.5,Y+Height*0.5-l,X-Width*0.5,Y+Height*0.5)\n    setDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\nend\n\nfunction AddText(align,color,font,text,x,y)\n    setNextTextAlign(H, align, AlignV_Middle)\n    setNextFillColor(H, color.r, color.g, color.b, 1)  \n    addText(H, font, text, x,y) \nend\n\nfunction DrawFrame1(X,Y,Width,Height)\n    setNextStrokeWidth(D,3)\n    setNextStrokeColor(D, color1.r, color1.g, color1.b, 1)\n    setNextFillColor(D, Colors[SelBackground].r, Colors[SelBackground].g, Colors[SelBackground].b, SelectionOpacity)\n    addBoxRounded(D,X-390,Y-Height/2-5,Width+500,Height+10,2)\nend\n\n-------------------------------------------------------------\n-- BACKGROUND --\n\nlocal background = loadImage(_background)\naddImage(D, background, 0, 0, rx, ry,0.2)\n\n-- background lines D\nsetDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 0.02)\nMaxLines =50\nfor i=1, MaxLines do\n    addLine(D,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\nend\nMaxLines =70\nfor i=1, MaxLines do\n    addLine(D,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\nend\n\n-- background lines F\nsetDefaultStrokeColor(F, Shape_Line, color1.r, color1.g, color1.b, 0.02)\nMaxLines =50\nfor i=1, MaxLines do\n    addLine(F,0,ry/MaxLines*i, rx,ry/MaxLines*i)-- horizontal lines\nend\nMaxLines =70\nfor i=1, MaxLines do\n    addLine(F,rx/MaxLines*i,0, rx/MaxLines*i,ry)-- vertical lines\nend\n\n\n\nsetDefaultStrokeColor(D, Shape_Line, color1.r, color1.g, color1.b, 1)\nsetDefaultStrokeWidth(D, Shape_Line, 8)\n\nDrawFrame(rx/2,33,rx-420,ry-65)\n\nsetDefaultStrokeWidth(D, Shape_Line, 3)\n\n\n\n-------------------------------------------------------------\n-- INDEX 1 --\nif ScreenIndex == 1 then\n\n    AddText(AlignH_Center,fontColor,SmallestFont, \"MAIN SCREEN\", rx/2, ry*0.025)\n\n    -----------------\n    -- 1 SHIP INFO --\n    -----------------\n\n    local X1 = rx*Layouts[Layout][1]\n    local Y1 = ry*Layouts[Layout][2]\n    local Width = rx*0.28\n    local Height = 110\n\n    DrawSmallBox(0,X1,Y1,ShipName,0,false,0,0,11)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, \"Fuel: \"..reformatInt(math.floor(TankTotalWeight/1000))..\" tons\", X1+30,Y1+52)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, NormalFont, \"Cargo: \"..reformatInt(HubTotalWeight)..\" tons\", X1+30,Y1+75)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggerFont, \"Total: \"..reformatInt(math.floor(ShipMass/1000))..\" tons\", X1+28,Y1+105)\n\n    -----------------\n    -- 2 HUB VBARS --\n    -----------------\n \n    local W = 30 --! used for X2 calculation\n    local X2 = rx*Layouts[Layout][3]-(#HubData*75)-W*2.5\n    local Y2 = ry*Layouts[Layout][4]\n\n    MakeButtonClickable(150+X2-60,Y2,#HubData*151,140,3)\n    for i = 1, #HubData do    \n        X2 = X2+150\n        DrawVProgressBar(X2,Y2,W,120,HubData[i].m,HubData[i].v,HubData[i].l,math.floor(HubData[i].v*100/HubData[i].m)..\"%   (\"..HubData[i].w..\" tons)\")\n    end\n\n    -------------------\n    -- 3 FUEL GAUGES --\n    -------------------\n\n    local X31 = 85\n    local Y31 = ry*0.46\n    \n    local X32 = X31 + 780\n\n    s = 60 - #FuelData*2.7\n    ss = math.floor(#FuelData/2) -- split gauges on each side\n    Y = Y31-#FuelData*s*0.9\n    T = Y\n\n    MakeButtonClickable(X32,50,100,ry-110,4)\n    MakeButtonClickable(X31,50,100,ry-110,4)\n\n    for i = 1, ss do        \n        T = T + s*2.8\n        drawRadialGauge(X31+35,T,s,FuelData[i].v,FuelData[i].m,FuelData[i].l,FuelData[i].t)\n    end\n    for i = ss+1, #FuelData do\n        Y = Y + s*2.8\n        drawRadialGauge(X32+35,Y,s,FuelData[i].v,FuelData[i].m,FuelData[i].l,FuelData[i].t)\n    end\n\n    ------------------------\n    -- 4 DAMAGED ELEMENTS --\n    ------------------------\n\n    local X4 = rx*Layouts[Layout][7]\n    local Y4 = ry*Layouts[Layout][8]\n\n    Width = rx*0.36\n\n    DrawSmallBox(2,X4,Y4,\"Damaged Elements\",0,BrokenCount+DamagedCount,0,0,2)\n\n    if tonumber(TotalMaxHitPoints) ~= tonumber(TotalHitPoints) then -- triangle warning\n        local Size = 10\n        local X = X4 + rx*0.026\n        setNextFillColor(D, 247/255, 170/255, 16/255, 1) \n        addTriangle(D, X, Y4, X-Size, Y4+Size*2, X+Size, Y4+Size*2)\n        setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n        addText(D, BiggerFont, \"!\", X-Size/2.85,Y4+Size*2)\n    end\n\n    DrawProgressBar(X4 + rx*0.145,Y4+45,200,26,TotalMaxHitPoints,TotalHitPoints,\"\",\"\",BiggerFont)\n    setNextTextAlign(D, AlignH_Center, AlignV_Middle)\n    setNextFillColor(D, fontColor.r, fontColor.g, fontColor.b, 1)   \n    addText(D, BiggerFont, reformatInt(math.floor(TotalHitPoints))..\" Hit Points\", X4 + rx*0.145,Y4+95)\n\n\n    local X5 = rx*Layouts[Layout][9]\n    local Y5 = ry*Layouts[Layout][10]\n\n    DrawSmallBox(0,X5,Y5,\"Docked Constructs\",DockedData,#DockedData,1,reformatInt(math.floor(DockedTotalWeight/1000)),5)\n    \n    local X6 = rx*Layouts[Layout][11]\n    local Y6 = ry*Layouts[Layout][12]\n    DrawSmallBox(0,X6,Y6,\"Boarded Players\",BoardedData,#BoardedData,1,reformatInt(math.floor(PlayerTotalWeight/1000)),6)\n\n    -------------------------------------------------------------\n    -- INDEX 11 -- THEME SCREEN\n\nelseif ScreenIndex == 11 then\n   \n    AddText(AlignH_Right,fontColor,SmallestFont, \"THEME SCREEN\", rx/2, ry*0.025)\n\n    local out = {\n        Index = 11,\n        ThemeSelection = {Color1,Color2,FontColor,SBackground,SelBackground,SelOpacity,Theme,Layout}    \n    }\n    setOutput(json.encode(out))\n    DrawBackButton(25,10,135,43,1)\n  \n    Xref = rx*0.7\n    Y = ry*0.02\n\n    ---------------------\n    -- Theme Selection --\n    ---------------------\n    X = Xref\n    Y = Y + 65\n    Width = 50\n    Height = 40\n    AddText(AlignH_Right,fontColor,BiggestFont,\"Preset :\",X-130,Y)\n    AddText(AlignH_Center,fontColor,BiggestFont,Theme,X-30,Y)\n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n    if Click(X+30,Y,Width,Height) == true then   \n        if Theme < #Themes then \n            Theme = Theme + 1\n        else\n            Theme = 1\n        end  \n        SetTheme(Themes[Theme])\n    end\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n    if Click(X,Y,Width,Height) == true then  \n        if Theme - 1 ~= 0 then \n            Theme = Theme - 1\n\n        else\n            Theme = #Themes\n        end   \n        SetTheme(Themes[Theme])\n    end\n\n\n    -------------------\n    -- Primary Color --\n    -------------------\n    X = Xref\n    Y = Y + 60\n    Width = 50\n    Height = 40\n    AddText(AlignH_Right,fontColor,BiggerFont,\"Primary Color : \",X-130,Y)\n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n    if Click(X+30,Y,Width,Height) == true then   \n        if Color1 < #Colors then \n            Color1 = Color1 + 1\n        else\n            Color1 = 1\n        end\n    end\n    setNextStrokeWidth(E,1)\n    setNextStrokeColor(E, 0, 0, 0, 1)\n    setNextFillColor(E, color1.r, color1.g, color1.b, 1)\n    addBox(E,X-Width-10,Y-Height*0.25-5,60,30)\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n    if Click(X,Y,Width,Height) == true then  \n        if Color1 - 1 ~= 0 then \n            Color1 = Color1 - 1\n        else\n            Color1 = #Colors\n        end   \n    end\n    DrawFrame1(X,Y,Width,Height-10)\n\n\n\n    ---------------------\n    -- Secondary Color --\n    ---------------------\n    X = Xref\n    Y = Y + 60\n\n    AddText(AlignH_Right,fontColor,BiggerFont,\"Secondary Color :\",X-130,Y) \n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n\n    if Click(X+30,Y,Width,Height) == true then   \n        if Color2 < #Colors then \n            Color2 = Color2 + 1\n        else\n            Color2 = 1\n        end     \n    end\n    setNextStrokeWidth(E,1)\n    setNextStrokeColor(E, 0, 0, 0, 1)\n    setNextFillColor(E, color2.r, color2.g, color2.b, 1)\n    addBox(E,X-Width-10,Y-Height*0.25-5,60,30)\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n    if Click(X,Y,Width,Height) == true then  \n        if Color2 - 1 ~= 0 then \n            Color2 = Color2 - 1\n        else\n            Color2 = #Colors\n        end\n    end\n    DrawFrame1(X,Y,Width,Height-10)\n\n    ----------------\n    -- Font Color --\n    ----------------\n    X = Xref\n    Y = Y + 60\n\n    AddText(AlignH_Right,fontColor,BiggerFont,\"Font Color :\",X-130,Y) \n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n\n    if Click(X+30,Y,Width,Height) == true then   \n        if FontColor < #Colors then \n            FontColor = FontColor + 1\n        else\n            FontColor = 1\n        end \n    end\n    setNextStrokeWidth(E,1)\n    setNextStrokeColor(E, 0, 0, 0, 1)\n    setNextFillColor(E, fontColor.r, fontColor.g, fontColor.b, 1)\n    addBox(E,X-Width-10,Y-Height*0.25-5,60,30)\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n    if Click(X,Y,Width,Height) == true then  \n        if FontColor - 1 ~= 0 then \n            FontColor = FontColor - 1\n        else\n            FontColor = #Colors\n        end \n    end\n    DrawFrame1(X,Y,Width,Height-10)\n\n\n    --------------------------------\n    -- Selection Background Color --\n    --------------------------------\n    X = Xref\n    Y = Y + 60\n\n    AddText(AlignH_Right,fontColor,BiggerFont,\"Selection Background :\",X-130,Y) \n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n\n    if Click(X+30,Y,Width,Height) == true then   \n        if SelBackground < #Colors then \n            SelBackground = SelBackground + 1\n        else\n            SelBackground = 1\n        end \n    end\n    setNextStrokeWidth(E,1)\n    setNextStrokeColor(E, 0, 0, 0, 1)\n    setNextFillColor(E, SelectionBackground.r, SelectionBackground.g, SelectionBackground.b, 1)\n    addBox(E,X-Width-10,Y-Height*0.25-5,60,30)\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n    if Click(X,Y,Width,Height) == true then  \n        if SelBackground - 1 ~= 0 then \n            SelBackground = SelBackground - 1\n        else\n            SelBackground = #Colors\n        end  \n    end\n    DrawFrame1(X,Y,Width,Height-10)\n\n    ----------------------------------\n    -- Selection Background Opacity --\n    ----------------------------------\n    X = Xref\n    Y = Y + 60    \n    AddText(AlignH_Right,fontColor,BiggerFont,\"Selection Opacity :\",X-130,Y) \n    AddText(AlignH_Center,fontColor,BiggestFont,math.floor(SelectionOpacity*10)/10,X-30,Y)\n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n\n    if Click(X+30,Y,Width,Height) == true then   \n        if SelOpacity < 1 then \n            SelOpacity = SelOpacity + 0.1\n        else\n            SelOpacity = 0\n        end\n    end\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n\n    if Click(X,Y,Width,Height) == true then  \n        if SelOpacity - 0.1 < 0 then \n            SelOpacity = 1\n        else\n            SelOpacity = SelOpacity - 0.1\n        end    \n    end\n    DrawFrame1(X,Y,Width,Height-10)\n\n    ----------------------\n    -- Background Image --\n    ----------------------\n    X = Xref\n    Y = Y + 60    \n    AddText(AlignH_Right,fontColor,BiggerFont,\"Background :\",X-130,Y) \n    AddText(AlignH_Center,fontColor,BiggestFont,SBackground,X-30,Y)\n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n\n    if Click(X+30,Y,Width,Height) == true then   \n        if SBackground < #BackgroundImages then \n            SBackground = SBackground + 1\n        else\n            SBackground = 1\n        end        \n    end\n\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n    if Click(X,Y,Width,Height) == true then  \n        if SBackground - 1 ~= 0 then \n            SBackground = SBackground - 1\n        else\n            SBackground = #BackgroundImages\n        end \n    end\n    DrawFrame1(X,Y,Width,Height-10)\n\n    ------------\n    -- Layout --\n    ------------\n    X = Xref\n    Y = Y + 60    \n    AddText(AlignH_Right,fontColor,BiggerFont,\"Layout :\",X-130,Y) \n    AddText(AlignH_Center,fontColor,BiggestFont,Layout,X-30,Y)\n    AddText(AlignH_Center,fontColor,BiggestFont,\">>\",X+30,Y)\n\n    if Click(X+30,Y,Width,Height) == true then   \n        if Layout < #Layouts then \n            Layout = Layout + 1\n        else\n            Layout = 1\n        end        \n    end\n\n    X = X - 90\n    AddText(AlignH_Center,fontColor,BiggestFont,\"<<\",X,Y)\n    if Click(X,Y,Width,Height) == true then  \n        if Layout - 1 ~= 0 then \n            Layout = Layout - 1\n        else\n            Layout = #Layouts\n        end \n    end\n    DrawFrame1(X,Y,Width,Height-10)\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 2 -- DAMAGED ELEMENTS DETAILS\nelseif ScreenIndex == 2 or string.find(ScreenIndex, \"2,\") then\n\n\n    AddText(AlignH_Center,fontColor,SmallestFont,\"REPAIR SCREEN\",rx/2, ry*0.025)\n\n    cc = cc or 1\n    cc = cc+1\n    AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship\", rx-175,ry-30)\n\n    if cc > 2 then AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship.\", rx-175,ry-30) end\n    if cc > 6 then AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship..\", rx-175,ry-30) end\n    if cc > 10 then AddText(AlignH_Left,fontColor,NormalFont,\"Scanning Ship...\", rx-175,ry-30) end\n    if cc>14 then cc = 1 end\n\n    X = rx*0.48\n\n    Y = 40\n    drawRadialGauge(rx*0.12,Y+420,70,TotalHitPoints,TotalMaxHitPoints,\"\")\n    AddText(AlignH_Left,fontColor,BiggestFont,ShipName,rx*0.05,Y+150)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(TotalMaxHitPoints))..\" Max Hit Points\",rx*0.05,Y+200)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(TotalHitPoints))..\" Hit Points\", rx*0.05,Y+230)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(DamagedCount))..\" Damaged Elements\", rx*0.05,Y+280)\n    AddText(AlignH_Left,fontColor,NormalFont,reformatInt(math.floor(BrokenCount))..\" Broken Elements\", rx*0.05,Y+310)\n    DrawBackButton(25,10,135,43,1)\n\n    X = 650\n    Y = 30\n    if type(DamagedElements) == 'table' then\n        if #DamagedElements > 0 then\n\n            Size=20\n\n            setDefaultStrokeColor(D, Shape_Line, color2.r, color2.g, color2.b, 1)\n\n            setNextRotationDegrees(D, 90)\n            setNextFillColor(D, color2.r, color2.g, color2.b, 1)\n            addTriangle(D, X-210, Y+45, X-210-Size, Y+45+Size*2, X-210+Size, Y+45+Size*2)\n            setNextStrokeWidth(D,8)\n\n            addLine(D,X-210-Size, Y+45+Size*2/2,X-60-210-Size, Y+45+Size*2/2)\n\n            setNextRotationDegrees(D, -90)\n            setNextFillColor(D, color2.r, color2.g, color2.b, 1)\n\n            addTriangle(D, X+209, Y+45, X+209-Size, Y+45+Size*2, X+209+Size, Y+45+Size*2)\n\n            setNextStrokeWidth(D,8)\n\n            addLine(D,X+209+Size, Y+45+Size*2/2,X+60+209+Size, Y+45+Size*2/2)\n\n            AddText(AlignH_Center,fontColor,BiggerFont,DamagedElements[1].l, X,Y+30)\n\n            DrawProgressBar(X,Y+20+30,350,35,DamagedElements[1].m,DamagedElements[1].w,\"\",\"\",BiggerFont)\n            AddText(AlignH_Center,fontColor,BiggerFont,math.floor(DamagedElements[1].w)..\"/\"..math.floor(DamagedElements[1].m), X,Y+104)\n\n            Y = 130\n            for i=2, #DamagedElements do\n\n                if (i % 2 == 0) then --it is even\n                    X = 500   \n                    Y=Y+65\n                else --it is odd\n                    X = 800  \n\n                end\n\n                AddText(AlignH_Center,fontColor,SmallerFont,DamagedElements[i].l, X,Y)\n\n                DrawProgressBar(X,Y+20,230,15,DamagedElements[i].m,DamagedElements[i].w,\"\",\"\",BiggerFont)\n                MakeButtonClickable(X-105,Y-5,240,30,\"2,\"..DamagedElements[i].id)\n            end\n        else\n            AddText(AlignH_Center,fontColor,BiggestFont, \"SHIP UNDAMAGED\", rx/2,ry/2)\n\n            addLine(D,rx/2-150,ry/2+30,rx/2+150,ry/2+30)\n            addLine(D,rx/2-160,ry/2-30,rx/2+160,ry/2-30)\n        end\n    end\n    -------------------------------------------------------------\n    -- INDEX 3 -- HUBS SCREEN\n\nelseif ScreenIndex == 3 then\n\n    X = rx*0.5\n    Y = ry*0.1701\n    AddText(AlignH_Center,fontColor,BiggestFont,#HubData..\" Container Hubs\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n\n    AddText(AlignH_Center,fontColor,BiggestFont,\"Total Hubs Weight: \"..math.floor(HubTotalWeight)..\" tons\", X, Y-4)\n    AddText(AlignH_Center,fontColor,SmallestFont, \"HUBS SCREEN\", rx/2, ry*0.025)\n\n    X = rx*0.5\n    Y = ry*0.1\n    Width = 400\n    Height = 50\n\n    if #HubData < 5 then\n        Y = ry*0.35-(ry*0.06*#HubData)\n    end\n\n    for i = 1, #HubData do\n        Y = Y+80\n        DrawProgressBar(X,Y,Width,Height,HubData[i].m,HubData[i].v,HubData[i].l,\" \"..math.floor(HubData[i].v*100/HubData[i].m)..\"%\" ..\"    (\"..HubData[i].w..\" tons)\",NormalFont)\n    end\n\n    DrawBackButton(25,10,135,43,1)\n    DrawNextButton(rx-210,10,135,43,31)\n\n    -------------------------------------------------------------\n    -- INDEX 31 --\n\nelseif ScreenIndex == 31 then\n\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont, HubData[1].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[1].m,HubData[1].v,\"\",math.floor(HubData[1].v*100/HubData[1].m)..\"%\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[1].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,3) end\n\n    if #HubData > 1 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,32) end\n    end\n\n\n    -------------------------------------------------------------\n    -- INDEX 32 --\n\nelseif ScreenIndex == 32 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont, HubData[2].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[2].m,HubData[2].v,\"\",math.floor(HubData[2].v*100/HubData[2].m)..\"%\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[2].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,31) end\n\n    if #HubData > 2 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,33) end\n    end\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 33 --\n\nelseif ScreenIndex == 33 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont, HubData[3].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[3].m,HubData[3].v,\"\",math.floor(HubData[3].v*100/HubData[3].m)..\"%\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[3].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,Width,Height,32) end\n\n    if #HubData > 3 then\n        local X=rx-210\n        if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawNextButton(X,Y,Width,Height,34) end\n    end\n\n\n\n    -------------------------------------------------------------\n    -- INDEX 34 --\n\nelseif ScreenIndex == 34 then\n    DrawFrame(rx/2,130,430,310) -- 1 hub on xs screen\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[4].l, rx*0.5,ry*0.17)\n\n    DrawProgressBar(rx*0.5,ry*0.8,320,20,HubData[4].m,HubData[4].v,\"\",math.floor(HubData[4].v*100/HubData[4].m)..\"%\",NormalFont)\n    AddText(AlignH_Center,fontColor,BiggestFont,HubData[4].w..\" tons\", rx*0.5,ry*0.88)\n\n    local X=25\n    local Y=10\n    local Width=135\n    local Height=43\n    if cx > X and cx < X+Width*2 and cy > Y and cy < Y+Height*2 then DrawBackButton(X,Y,135,43,33) end\n\n\n    -------------------------------------------------------------\n    -- INDEX 4 --\n\nelseif ScreenIndex == 4 then\n    AddText(AlignH_Center,fontColor,SmallestFont,\"FUEL SCREEN\", rx/2, ry*0.025)\n\n    X = rx*0.5\n    Y = ry*0.1701   \n    AddText(AlignH_Center,fontColor,BiggestFont,#FuelData..\" Fuel Tanks\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n\n    AddText(AlignH_Center,fontColor, BiggestFont, \"Total Fuel Weight: \"..math.floor(TankTotalWeight/1000)..\" tons\", X, Y-4)\n\n    -- if (i % 2 == 0) then --it is even\n    --   X = 280             \n    -- else --it is odd\n    -- X = 745     \n    -- end\n\n\n    rocket = 0\n    atmo = 0\n    space = 0\n    for i=1, #FuelData do\n        if string.match(FuelData[i].t,\"Space\") then\n            space = space +1\n        elseif string.match(FuelData[i].t,\"Atmospheric\") then\n            atmo = atmo +1\n        elseif string.match(FuelData[i].t,\"Rocket\") then\n            rocket = rocket +1\n        end\n    end\n \n    AddText(AlignH_Left,fontColor,NormalFont, space ..\" Space\", rx*0.72,ry*0.1+40)\n    AddText(AlignH_Left,fontColor,NormalFont, atmo ..\" Atmospheric\", rx*0.72,ry*0.1+65)\n    AddText(AlignH_Left,fontColor,NormalFont, rocket ..\" Rocket\", rx*0.72,ry*0.1+90)\n\n    if #FuelData > 6 then -- two rows\n        X = rx*0.35\n        Width = 120\n        Height = 25\n        Y = ry*0.25\n        O = 50-#FuelData\n\n        for i = 1, math.floor(#FuelData/2) do\n            Y = Y+O\n            DrawProgressBar(X*0.90,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",SmallestFont)\n        end\n        Y = ry*0.25\n        for i = math.floor(#FuelData-#FuelData/2)+1, #FuelData do\n            Y = Y+O\n            DrawProgressBar(X*2.2,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",SmallestFont)\n        end\n\n    else\n        X = rx*0.5\n        Width = 400\n        Height = 50-#FuelData*3\n        Y = ry*0.2\n        O = 78-#FuelData*5\n        for i = 1, #FuelData do    \n            Y = Y+O\n            DrawProgressBar(X,Y,Width,Height,FuelData[i].m,FuelData[i].v,FuelData[i].l,math.floor(FuelData[i].v*100/FuelData[i].m)..\"%    (\"..FuelData[i].w..\" tons)\",NormalFont)\n        end\n    end\n\n    DrawBackButton(25,10,135,43,1)\n\n    -------------------------------------------------------------\n    -- INDEX 5 -- DOCKED CONSTRUCTS SCREEN\n\nelseif ScreenIndex == 5 or ScreenIndex == 52 then\n    X = rx*0.5\n    Y = ry*0.1701\n    AddText(AlignH_Center,fontColor,SmallestFont, \"DOCKED CONSTRUCTS SCREEN\", X, ry*0.025)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"Select construct to undock\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    \n    AddText(AlignH_Center,fontColor,BiggestFont, \"Total Docked Weight: \"..math.floor(DockedTotalWeight/1000)..\" tons\", X, Y-4)\n\n    DrawBackButton(25,10,135,43,1)\n\n    Y=110\n    for i = 1, #DockedData do    \n\n        if (i % 2 == 0) then \n            X = 280   --it is even\n        else \n            X = 740  --it is odd\n            Y=Y+70\n        end\n\n        AddText(AlignH_Center,fontColor,BiggerFont, DockedData[i].l ..\" (\"..DockedData[i].w..\" tons)\", X,Y)\n\n        MakeButtonClickable(X-175,Y-20,380,30,\"51,\"..DockedData[i].id)\n\n    end\n\n\nelseif ScreenIndex == 51 then\n    DrawBackButton(25,10,135,43,5)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"FORCE UNDOCK \" .. ID ..\" ?\", rx/2,ry*0.3)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"CONFIRM\", rx/2,ry*0.5)\n\n    MakeButtonClickable(rx/2-175,ry*0.5-20,380,30,\"52,\"..ID)\n\n\n    -------------------------------------------------------------\n    -- INDEX 6 --\n\nelseif ScreenIndex == 6 or ScreenIndex == 62 then\n\n\n    X = rx*0.5\n    Y = ry*0.1701\n    AddText(AlignH_Center,fontColor,SmallestFont, \"BOARDED PLAYERS SCREEN\", X, ry*0.025)\n\n    AddText(AlignH_Center,fontColor,BiggestFont, \"Select player to deboard\",X, Y+6)\n\n    addLine(D,X-210, Y+30,X+210, Y+30)\n    addLine(D,X-210, Y+30,X-210, Y+30-45)\n    Y = ry*0.825\n    addLine(D,X-230, Y-28,X+230, Y-28)\n    addLine(D,X+230, Y-28,X+230, Y-28+45)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"Total Players Weight: \"..math.floor(PlayerTotalWeight/1000)..\" tons\", X, Y-4)\n\n    DrawBackButton(25,10,135,43,1)\n\n    Y=110\n    for i = 1, #BoardedData do    \n\n        if (i % 2 == 0) then \n            X = 280   --it is even\n        else \n            X = 740  --it is odd\n            Y=Y+70\n        end\n\n        AddText(AlignH_Center,fontColor, BiggerFont, BoardedData[i].l ..\" (\"..BoardedData[i].w..\" tons)\", X,Y)\n        MakeButtonClickable(X-175,Y-20,380,30,\"61,\"..BoardedData[i].id)\n    end\n\nelseif ScreenIndex == 61 then\n    DrawBackButton(25,10,135,43,6)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"FORCE DEBOARD \" .. ID ..\" ?\", rx/2,ry*0.3)\n    AddText(AlignH_Center,fontColor,BiggestFont, \"CONFIRM\", rx/2,ry*0.5)\n    MakeButtonClickable(rx/2-175,ry*0.5-20,380,30,\"62,\"..ID)\n\nend\n\n-------------------------------------------------------------\n-- BOTTOM SCREEN INFOS --\nAddText(AlignH_Center,fontColor,SmallestFont, \"SHIP INFO v\" .. version, rx/2, ry*0.975)\n\nif debug == true then\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"Loop:\"..Duration, rx*0.25,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"Index:\"..ScreenIndex, rx/2+235,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1)\n    addText(D, SmallestFont, \"ScreenId:\"..ScreenId, rx/2+145,ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1) \n    addText(D, SmallestFont, \"Rendering:\"..math.floor((getRenderCost()*100)/getRenderCostMax())..\"%\", rx/2.9, ry*0.984)\n    setNextFillColor(D, 1, 0.1, 0.1, 1) \n    addText(D, SmallestFont, \"Input:\"..#getInput()..\"/1024\", rx/1.8, ry*0.984)\nend\n\n\nrequestAnimationFrame(1) \n\n\n\n\n]]","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"2"},{"code":"function GetHubData(Hubs,hubs)\n    local z = 0\n    local d = 'local HubData = {}'\n    for i = 1, #Hubs do\n        w = math.floor(hubs[i].getItemsMass()/1000)\n        d = d..[[            \n        HubData[]]..i..[[]= {\n        l=\"]]..Hubs[i].l..[[\",\n        m= ]]..Hubs[i].m..[[,\n        v= ]]..math.floor(hubs[i].getItemsVolume())..[[,\n        w= ]]..w..[[}]]\n        z = z + w\n    end    \n    d = d..[[ local HubTotalWeight = ]]..z\n    return d\nend\n\nfunction GetTankData(tanks)\n    local z = 0   \n    local d = 'local FuelData = {}'\n    for i = 1, #tanks do\n        local w = core.getElementMassById(tanks[i].id)\n        if string.match(tanks[i].t, \"Atmospheric\") then\n            f = 4\n        elseif string.match(tanks[i].t, \"Space\") then\n            f = 6\n        elseif string.match(tanks[i].t, \"Rocket\") then\n            f = 0.8\n        end        \n        d = d..[[            \n        FuelData[]]..i..[[]= {\n        l=\"]]..tanks[i].l..[[\",\n        m= ]].. tanks[i].m ..[[,\n        v= ]]..math.floor((w - tanks[i].u)/f*(1+Container_Optimization/10+Fuel_Tank_Optimization/10))..[[,\n        t= \"]]..tanks[i].t..[[\",\n        w= ]]..math.floor((w - tanks[i].u)/1000)..[[}]]\n        z = z + w - tanks[i].u\n    end\n    d = d..[[local TankTotalWeight = ]]..z\n    return d\nend\n\nfunction GetDockedData()\n    local d = 'local DockedData = {}'\n    local z = 0\n    local a = core.getDockedConstructs()\n    for i = 1, #a do\n        w = core.getDockedConstructMass(a[i])\n        z = z + w\n        d = d..[[\n        DockedData[]]..i..[[]= {\n        l=\"Construct []]..a[i]..[[]\",\n        id= ]].. a[i] ..[[,\n        w= ]]..math.floor(w/1000)..[[}]]\n    end\n    d = d..[[local DockedTotalWeight = ]]..z\n    return d\nend\n\nfunction GetBoardedData()\n    local d = 'local BoardedData = {}'\n    local z = 0\n    local a = core.getPlayersOnBoard()\n    for i = 1, #a do\n        w = core.getBoardedPlayerMass(a[i])\n        z = z + w\n        d = d..[[\n        BoardedData[]]..i..[[]= {\n        l=\"[]]..system.getPlayerName(a[i])..[[]\",\n        id= ]].. a[i] ..[[,\n        w= ]]..math.floor(w/1000)..[[}]]\n    end\n    d = d..[[local PlayerTotalWeight = ]]..z\n    return d\nend\n\nfunction GetDamagedData(r,idforarrow)\n\n    core.deleteSticker(a1)\n    core.deleteSticker(a2)\n    core.deleteSticker(a3)\n    core.deleteSticker(a4)\n    core.deleteSticker(a5)\n    core.deleteSticker(a6)\n\n    local d = 'local DamagedElements = {}' -- initializing data as string\n\n    BrokenCount = BrokenCount or 0\n    DamagedCount = DamagedCount or 0\n    TotalMaxHitPoints = TotalMaxHitPoints or 0\n    TotalHitPoints = TotalHitPoints or 0\n\n    if r == true then -- if repair mode\n\n        BrokenCount = 0\n        DamagedCount = 0\n        TotalMaxHitPoints = 0\n        TotalHitPoints = 0\n        local t = {}\n\n        --system.print(\"RepairMode: \"..tostring(r)..\" FirstRun: \"..tostring(FirstRun))\n\n        local elements = core.getElementIdList()\n\n        for i = 1, #elements do \n\n            local MaxHitPoints = core.getElementMaxHitPointsById(elements[i])\n            local HitPoints = core.getElementHitPointsById(elements[i])\n\n            TotalMaxHitPoints = TotalMaxHitPoints + MaxHitPoints\n            TotalHitPoints = TotalHitPoints + HitPoints\n\n            if tonumber(HitPoints) < tonumber(MaxHitPoints) then\n                if HitPoints == 0 then BrokenCount = BrokenCount +1 end\n                if HitPoints > 0 then DamagedCount = DamagedCount +1 end\n\n                table.insert(t,{\n                        l = core.getElementNameById(elements[i]),\n                        w = HitPoints,\n                        id = elements[i],\n                        m = MaxHitPoints\n                    })\n            end\n        end\n\n        table.insert(t,1,{\n                l = core.getElementNameById(idforarrow),\n                w = core.getElementHitPointsById(idforarrow),\n                id = idforarrow,\n                m = core.getElementMaxHitPointsById(idforarrow)\n            })\n\n        if t[1].w == t[1].m then -- if first entry HP full\n            table.remove(t,1) -- then remove it\n        end\n\n        local at = {}\n        for i = 1, 10 do \n            if i < #t+1 then -- limiting table to 10 lines\n                table.insert(at,{\n                        l = t[i].l,\n                        id = t[i].id,\n                        m = t[i].m,\n                        w = t[i].w})\n            end\n        end\n \n        if #t > 0 then\n            local pos = core.getElementPositionById(at[1].id) -- show arrow for first entry\n            a1 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"up\")\n            a2 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"south\")\n            a3 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"west\")\n            a4 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"east\")\n            a5 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"north\")\n            a6 = core.spawnArrowSticker(pos[1],pos[2],pos[3],\"down\")\n        end\n\n        for i=1, #at do\n            d = d..[[\n            DamagedElements[]].. i .. [[]= {\n            l=\"]].. at[i].l..[[\",\n            id= ]].. at[i].id ..[[,\n            m= ]].. at[i].m ..[[,\n            w= ]].. at[i].w ..[[}]]\n        end\n\n    end\n    d = d..[[\n    local TotalMaxHitPoints = ]]..TotalMaxHitPoints..[[\n    local TotalHitPoints = ]]..TotalHitPoints..[[\n    local BrokenCount= ]].. BrokenCount ..[[\n    local DamagedCount= ]].. DamagedCount ..[[]]\n    return d\n\nend\n\nfunction comparetables(t1, t2)\n  if #t1 ~= #t2 then return false end\n  for i=1,#t1 do\n    if t1[i] ~= t2[i] then return false end\n  end\n  return true\nend\n","filter":{"args":[],"signature":"start()","slotKey":"-3"},"key":"3"}],"methods":[],"events":[]}